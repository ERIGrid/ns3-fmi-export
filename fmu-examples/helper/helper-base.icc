/* -*- Mode:C++; c-file-style:"bsd"; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef HELPER_BASE_ICC
#define HELPER_BASE_ICC

#include "ns3/uinteger.h"
#include "ns3/names.h"


namespace ns3 {


/**
 * \ingroup fmu-example
 * \brief Base class for creating a server application. Adapted from class ns3::UdpServerHelper.
 */
template< typename ServerType >
class ServerHelperBase
{

public:

	/**
	 * \param port The port the server will wait on for incoming packets
	 */
	ServerHelperBase( uint16_t port );

	/**
	 * \param name the name of the attribute to set
	 * \param value the value of the attribute to set
	 */
	void SetAttribute( std::string name, const AttributeValue &value );

	/**
	 * \param node The node on which to create the Application.  The node is
	 *             specified by a Ptr<Node>.
	 *
	 * \returns An ApplicationContainer holding the Application created,
	 */
	ApplicationContainer Install( Ptr<Node> node ) const;

	/**
	 * \param nodeName The node on which to create the application.  The node
	 *                 is specified by a node name previously registered with
	 *                 the Object Name Service.
	 *
	 * \returns An ApplicationContainer holding the Application created.
	 */
	ApplicationContainer Install( std::string nodeName ) const;

	/**
	 * \param c The nodes on which to create the Applications.  The nodes
	 *          are specified by a NodeContainer.
	 *
	 * \returns The applications created, one Application per Node in the
	 *          NodeContainer.
	 */
	ApplicationContainer Install( NodeContainer c ) const;

private:

	/**
	 * \param node The node on which an TC3CustomServer will be installed.
	 * \returns Ptr to the application installed.
	 */
	Ptr<Application> InstallPriv( Ptr<Node> node ) const;

	ObjectFactory m_factory; //!< Object factory.

};


/**
 * \ingroup fmu-example
 * \brief Base class for creating a client application. Adapted from class ns3::UdpEchoClientHelper.
 */
template< typename ClientType >
class ClientHelperBase
{

public:
	/**
	 * \param ip The IP address of the remote udp echo server
	 * \param port The port number of the remote udp echo server
	 */
	ClientHelperBase( Address ip, uint16_t port );

	/**
	 * \param addr The address of the remote udp echo server
	 */
	ClientHelperBase( Address addr );

	/**
	 * \param name the name of the attribute to set
	 * \param value the value of the attribute to set
	 */
	void SetAttribute( std::string name, const AttributeValue &value );

	/**
	 * \param app Smart pointer to the application (real type must be TC3CustomClient).
	 * \param fill The string to use as the actual echo data bytes.
	 */
	void SetFill( Ptr<Application> app, std::string fill );

	/**
	 * \param app Smart pointer to the application (real type must be TC3CustomClient).
	 * \param fill The byte to be repeated in constructing the packet data..
	 * \param dataLength The desired length of the resulting echo packet data.
	 */
	void SetFill( Ptr<Application> app, uint8_t fill, uint32_t dataLength );

	/**
	 * \param app Smart pointer to the application (real type must be TC3CustomClient).
	 * \param fill The fill pattern to use when constructing packets.
	 * \param fillLength The number of bytes in the provided fill pattern.
	 * \param dataLength The desired length of the final echo data.
	 */
	void SetFill( Ptr<Application> app, uint8_t *fill, uint32_t fillLength, uint32_t dataLength );

	/**
	 * \param node The Ptr<Node> on which to create the TC3CustomClientApplication.
	 *
	 * \returns An ApplicationContainer that holds a Ptr<Application> to the
	 *          application created
	 */
	ApplicationContainer Install( Ptr<Node> node ) const;

	/**
	 * \param nodeName The name of the node on which to create the TC3CustomClientApplication
	 *
	 * \returns An ApplicationContainer that holds a Ptr<Application> to the
	 *          application created
	 */
	ApplicationContainer Install( std::string nodeName ) const;

	/**
	 * \param c the nodes
	 *
	 * \returns the applications created, one application per input node.
	 */
	ApplicationContainer Install( NodeContainer c ) const;

private:

	/**
	 * \param node The node on which an TC3CustomClient will be installed.
	 * \returns Ptr to the application installed.
	 */
	Ptr<Application> InstallPriv( Ptr<Node> node ) const;

	ObjectFactory m_factory; //!< Object factory.

};


template<typename ServerType>
ServerHelperBase<ServerType>::ServerHelperBase( uint16_t port )
{
	m_factory.SetTypeId( ServerType::GetTypeId() );
	SetAttribute( "Port", UintegerValue( port ) );
}


template<typename ServerType>
void
ServerHelperBase<ServerType>::SetAttribute( std::string name, const AttributeValue &value )
{
	m_factory.Set( name, value );
}


template<typename ServerType>
ApplicationContainer
ServerHelperBase<ServerType>::Install( Ptr<Node> node ) const
{
	return ApplicationContainer( InstallPriv( node ) );
}


template<typename ServerType>
ApplicationContainer
ServerHelperBase<ServerType>::Install( std::string nodeName ) const
{
	Ptr<Node> node = Names::Find<Node>( nodeName );
	return ApplicationContainer( InstallPriv( node ) );
}


template<typename ServerType>
ApplicationContainer
ServerHelperBase<ServerType>::Install( NodeContainer c ) const
{
	ApplicationContainer apps;
	for ( NodeContainer::Iterator i = c.Begin(); i != c.End(); ++i )
	{
		apps.Add( InstallPriv( *i ) );
	}

	return apps;
}


template<typename ServerType>
Ptr<Application>
ServerHelperBase<ServerType>::InstallPriv( Ptr<Node> node ) const
 {
	Ptr<Application> app = m_factory.Create<ServerType>();
	node->AddApplication( app );
	return app;
}


template<typename ClientType>
ClientHelperBase<ClientType>::ClientHelperBase( Address address, uint16_t port )
{
	m_factory.SetTypeId( ClientType::GetTypeId() );
	SetAttribute( "RemoteAddress", AddressValue( address ) );
	SetAttribute( "RemotePort", UintegerValue( port ) );
}


template<typename ClientType>
ClientHelperBase<ClientType>::ClientHelperBase( Address address )
{
	m_factory.SetTypeId( ClientType::GetTypeId() );
	SetAttribute( "RemoteAddress", AddressValue( address ) );
}


template<typename ClientType>
void
ClientHelperBase<ClientType>::SetAttribute( std::string name, const AttributeValue &value )
{
	m_factory.Set( name, value );
}


template<typename ClientType>
void
ClientHelperBase<ClientType>::SetFill( Ptr<Application> app, std::string fill )
{
	app->GetObject<ClientType>()->SetFill( fill );
}


template<typename ClientType>
void
ClientHelperBase<ClientType>::SetFill( Ptr<Application> app, uint8_t fill, uint32_t dataLength )
{
	app->GetObject<ClientType>()->SetFill( fill, dataLength );
}


template<typename ClientType>
void
ClientHelperBase<ClientType>::SetFill( Ptr<Application> app, uint8_t *fill, uint32_t fillLength, uint32_t dataLength )
{
	app->GetObject<ClientType>()->SetFill( fill, fillLength, dataLength );
}


template<typename ClientType>
ApplicationContainer
ClientHelperBase<ClientType>::Install( Ptr<Node> node ) const
{
	return ApplicationContainer( InstallPriv( node ) );
}


template<typename ClientType>
ApplicationContainer
ClientHelperBase<ClientType>::Install( std::string nodeName ) const
{
	Ptr<Node> node = Names::Find<Node>( nodeName );
	return ApplicationContainer( InstallPriv( node ) );
}


template<typename ClientType>
ApplicationContainer
ClientHelperBase<ClientType>::Install( NodeContainer c ) const
{
	ApplicationContainer apps;
	for ( NodeContainer::Iterator i = c.Begin(); i != c.End(); ++i )
	{
		apps.Add( InstallPriv( *i ) );
	}

	return apps;
}


template<typename ClientType>
Ptr<Application>
ClientHelperBase<ClientType>::InstallPriv( Ptr<Node> node ) const
{
	Ptr<Application> app = m_factory.Create<ClientType>();
	node->AddApplication( app );

	return app;
}


} // namespace ns3


#endif // HELPER_BASE_ICC